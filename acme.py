{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "Classes and methods to create a digital representation of Acme products\n",
    "'''\n",
    "from random import choice, randint, uniform\n",
    "\n",
    "class Product:\n",
    "    '''\n",
    "    A class for creating products\n",
    "    \n",
    "    '''\n",
    "    def __init__(self, name, price=10, weight=20,\n",
    "                 flammability=.5, identifier=randint(1000000, 9999999)):\n",
    "        '''\n",
    "        Initializer function for definding the product\n",
    "    \n",
    "        '''\n",
    "        self.name = name\n",
    "        self.price = price\n",
    "        self.weight = weight\n",
    "        self.flammability = flammability\n",
    "        self.identifier = identifier\n",
    "\n",
    "    def stealability(self):\n",
    "        '''\n",
    "        Use a predictive metric (price to weight) to predict how stealabe an item is.\n",
    "        '''\n",
    "        steal_metric = self.price / self.weight\n",
    "        if steal_metric < .5:\n",
    "            return 'Not so stealable...'\n",
    "        elif steal_metric < 1:\n",
    "            return 'Kinda stealable.'\n",
    "        else:\n",
    "            return 'Very stealable!'\n",
    "        \n",
    "class BoxingGlove(Product):\n",
    "    '''\n",
    "    The Acme Boxing Glove is an instantiation of the class Product\n",
    "\n",
    "    '''\n",
    "    def __init__(self, name, price=10, weight=10,\n",
    "                 flammability=.5, identifier=randint(1000000, 9999999)):\n",
    "     \n",
    "                super().__init__(name=name, price=price, weight=weight,\n",
    "                         flammability=flammability,\n",
    "                         identifier=identifier)\n",
    "        \n",
    "\n",
    "    def explode(self):\n",
    "        '''\n",
    "        Overriding to return \"it's a glove\"\n",
    "        '''\n",
    "        return \"...it's a glove.\"\n",
    "\n",
    "    def punch(self):\n",
    "        '''\n",
    "        Predicting intensity of punches by weight.\n",
    "        '''\n",
    "        if self.weight < 5:\n",
    "            return 'That tickles.'\n",
    "        elif self.weight < 15:\n",
    "            return 'Hey that hurt!'\n",
    "        else:\n",
    "            return 'OUCH!'\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
